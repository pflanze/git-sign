#!/bin/bash

set -euo pipefail
IFS=
# remember, *still* need to quote variables!

#set -x

# sorry, have to ignore your language settings to get predictable
# output from gpg (and enlish is used in this script anyway)
export LANG=C
export LC_ALL=C

myname=$(basename "$0")

usage () {
    echo "usage: $myname tagname"
    echo 
    echo "  verifies a signed tag, both the tag signature and then any"
    echo "  SHA-256 hash lists embedded within the tag message (to have"
    echo "  secure signing while git signatures still only rely on SHA-1)"
    echo 
    echo "  Options:"
    echo "    --accept-keys fp1,fp2,.."
    echo "         only accept the listed keys (full fingerprints with or"
    echo "         without spaces). Alternatively the VERIFY_SIG_ACCEPT_KEYS"
    echo "         env var can be set to the same. If neither is set, any key"
    echo "         on the local keyring that has a trust path is accepted."
    echo "    --require-accept-keys"
    echo "         fail unless VERIFY_SIG_ACCEPT_KEYS or --accept-keys is"
    echo "         given."
    echo "    --require-trust-path"
    echo "         fail if there is no trust path to the key that made"
    echo "         the signature. This is the default if VERIFY_SIG_ACCEPT_KEYS"
    echo "         is not set and no --accept-key option was given."
    echo "    --no-require-trust-path"
    echo "         do not fail if there is no trust path to the key that made"
    echo "         the signature. This is the default if VERIFY_SIG_ACCEPT_KEYS"
    echo "         is set or --accept-keys is given. Otherwise only use if"
    echo "         strictly controlling which keys are added to the keyrings!"
    exit 1
}


orig_args="$@"

unset tagname
acceptkeys=${VERIFY_SIG_ACCEPT_KEYS-}
requireacceptkeys=0
require_trust_path=undef

while [ "${#@}" -gt 0 ]; do
    case "$1" in
	-h|--help)
	    usage
	    ;;
	--accept-keys)
	    shift
	    acceptkeys="$1"
	    shift
	    ;;
	--require-accept-keys)
	    shift
	    requireacceptkeys=1
	    ;;
	--require-trust-path)
	    shift
	    require_trust_path=1
	    ;;
	--no-require-trust-path)
	    shift
	    require_trust_path=0
	    ;;
	*)
	    if [ -n "${tagname-}" ]; then
		usage
	    fi
	    tagname="$1"
	    shift
	    ;;
    esac
done

if [ -z "${tagname-}" ]; then
    usage
fi

if [ "$requireacceptkeys" -ne 0 ]; then
    if [ -z "$acceptkeys" ]; then
	echo "$myname: --require-accept-keys was given but neither VERIFY_SIG_ACCEPT_KEYS nor --accept-keys list any keys" # >&2
	exit 1
    fi
fi

# set defaults for require_trust_path (i.e. if not set already, i.e. non-default)
if [ "$require_trust_path" = undef ]; then
    if [ -z "$acceptkeys" ]; then
	require_trust_path=1
    else
	require_trust_path=0
    fi
fi


exitcode=0

tagcontents=$(mktemp)
git cat-file tag "$tagname" > "$tagcontents"
# (somewhat irritatingly, git cat-file does not accept "--" as option
# processing terminator)

tagbase=$(mktemp -d)
grep -A9999 -E '^-----BEGIN PGP SIGNATURE-----$' < "$tagcontents" > "$tagbase"/tagmessage.sig
siglen=$(wc -l < "$tagbase"/tagmessage.sig)
tac < "$tagcontents" | tail -n+$(( $siglen + 1 )) | tac > "$tagbase"/tagmessage

echo "(1) Verifying PGP signature"
(
    set -euo pipefail
    cd "$tagbase"
    gpg -v --verify tagmessage.sig 2>&1 | tee out
)

if egrep -q "digest algorithm (SHA1|MD5)\b" "$tagbase"/out; then
    echo "$myname: insecure digest algorithm, aborting!"
    exit 1
fi

# Bash should have terminated above if gpg in the subshell didn't
# succeed already; but be paranoid:
if ! egrep -q "^gpg: Good signature" "$tagbase"/out; then
    echo "$myname: missing 'Good signature', BUG, aborting!"
    exit 1
fi

if [ "$require_trust_path" -ne 0 ]; then
    # Don't accept good signatures from keys without a trust path
    if egrep -q "^gpg: WARNING:" "$tagbase"/out; then
	fp=$(cat "$tagbase"/out | perl -wne 'if (($k)=m/Primary key fingerprint: ([A-F0-9 ]+)/) { $k=~ s/\s//sg; print $k or die; exit}')
	echo "$myname: Not accepting signatures from keys without a trust path, aborting."
	echo "$myname: Please create a trust path. If you're confident that this key"
	echo "$myname: belongs to the claimed user, sign it via"
        echo "$myname:   gpg --sign-key $fp"
        echo "$myname: Alternatively, set "
        echo "$myname:   VERIFY_SIG_ACCEPT_KEYS=$fp"
        echo "$myname: or run"
        echo "$myname:   $myname $orig_args --accept-keys $fp"
	exit 1
    fi
fi

# Verify key to be one of the accepted keys, if specified:

error_fprs() {
    echo "$myname: error: expected exactly 1 entry for '$1' in:"
    cat "$tagbase"/fprs
    exit 1
}

if [ -n "$acceptkeys" ]; then

    if ! id=$(perl -wne ' BEGIN { $exitcode= 1 }
           if (($k)=m/using .*key (?:ID )?([A-F0-9]{8,})\b/) { 
                print $k or die; 
                $exitcode=0;
                exit
           } 
           END { exit $exitcode }' < "$tagbase"/out); then
	echo "$myname: could not find key id in gpg output"
	exit 1
    fi
    
    # retrieve fingerprints for this key:
    if ! gpg --fingerprint --with-colons "$id" > "$tagbase"/fprs; then
	echo "$myname: failed to retrieve fingerprints for key '$id'"
	exit 1
    fi

    # keys might not have a UID, hence also test for 'tru' field (XX: check spec for fields)
    if [ "$(grep ^tru: "$tagbase"/fprs | wc -l)" -ne 1 ]; then
	error_fprs tru
    fi
    # Is it OK to accept keys without uid? Thus, not requiring uid,
    # but check for pub instead.
    if [ "$(grep ^pub: "$tagbase"/fprs | wc -l)" -ne 1 ]; then
	error_fprs pub
    fi

    if ! ACCEPTKEYS="$acceptkeys" perl -we ' use strict; use warnings FATAL => "uninitialized"; 
            my %k= map { s/\s//sg; $_=> 1 } split /,/, $ENV{ACCEPTKEYS};
            my @accepted= grep { $k{$_} } map { chomp; (split /:/)[9] } grep { /^fpr:/ } <STDIN>;
            exit (@accepted ? 0 : 1)
    ' < "$tagbase"/fprs; then
	echo "$myname: key id '$id' does not resolve into any fingerprint that is contained in the list: $acceptkeys"
	exit 1
    fi
fi


echo
echo "(2) Verifying git-sign message"

numfiles1=$(mktemp)
grep -A1 -E '^\$ git ls-files -z \|.* perl.*\+\+ while' < "$tagbase"/tagmessage > "$numfiles1"
numfiles=$(mktemp)
tail -n+2 < "$numfiles1" > "$numfiles"

nsig=$(cat "$numfiles")
ngit=$(git ls-files -z | perl -we '$/="\0"; $z++ while <STDIN>; print "$z\n"')

if [ "$nsig" = "$ngit" ]; then
    nums=OK
else
    nums="NOT OK, git shows $ngit files, the message $nsig"
    exitcode=1
fi

hashes1=$(mktemp)
grep -A9999999 -E '^\$ git ls-files -z \|.* sha256sum' < "$tagbase"/tagmessage > "$hashes1"
hashes=$(mktemp)
tail -n+2 < "$hashes1" > "$hashes"

if sha256sum -c --warn --strict --quiet "$hashes"; then
    sigs=OK
else
    sigs="NOT OK (differences see above)"
    exitcode=1
fi

echo
echo "==> number of files: $nums"
echo "    hash sums: $sigs"

rm "$hashes" "$hashes1" "$numfiles1" "$numfiles" "$tagcontents"
rm -rf "$tagbase"

exit "$exitcode"
